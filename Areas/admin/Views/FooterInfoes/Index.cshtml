@model IEnumerable<task.Models.FooterInfo>
@{
    ViewData["Title"] = "Index - وايت هورس";
}

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Cairo:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- Custom CSS -->
    @* <link href="~/css/AdminDashboard.css" rel="stylesheet"> *@
</head>
<body>

    <!-- Main Dashboard -->
    <div class="dashboard-container">
    
        <!-- Main Content Area -->
        <div class="main-content">
            <h1>قائمة معلومات التواصل</h1>

            <p>
                <a asp-action="Create" class="btn btn-custom">إضافة جديد</a>
            </p>

            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.LogoUrl)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Description)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Phone)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Email)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Address)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Facebook)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Twitter)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Instagram)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Linkedin)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.GoogleMapEmbedUrl)
                            </th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.LogoUrl))
                                    {
                                        <img src="@item.LogoUrl" alt="Logo" style="max-width: 50px; max-height: 50px;" />
                                    }
                                    else
                                    {
                                        @Html.DisplayFor(modelItem => item.LogoUrl)
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Description)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Phone)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Email)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Address)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Facebook)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Twitter)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Instagram)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Linkedin)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.GoogleMapEmbedUrl)
                                </td>
                                <td>
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-custom">تعديل</a> |
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-secondary">تفاصيل</a> |
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">حذف</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.dashboard-card');
            cards.forEach(card => {
                card.addEventListener('click', function(e) {
                    const ripple = document.createElement('div');
                    ripple.style.position = 'absolute';
                    ripple.style.borderRadius = '50%';
                    ripple.style.background = 'rgba(255, 255, 255, 0.6)';
                    ripple.style.transform = 'scale(0)';
                    ripple.style.animation = 'ripple 0.6s linear';
                    ripple.style.left = (e.clientX - card.getBoundingClientRect().left) + 'px';
                    ripple.style.top = (e.clientY - card.getBoundingClientRect().top) + 'px';
                    ripple.style.width = ripple.style.height = '20px';
                    ripple.style.pointerEvents = 'none';
                    card.style.position = 'relative';
                    card.appendChild(ripple);
                    setTimeout(() => ripple.remove(), 600);
                });
            });
        });

        window.addEventListener('load', function() {
            document.body.classList.add('loaded');
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
</body>
</html>